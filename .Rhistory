y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
return(ReactorType)
}
reactor = reactorType()
reactor
capacity = capacityPlot()
capacity
main - function(){}
main - function(){}
main <- function(){
df <- import()
shinyApp(ui, server)
}
server <- function(input, output){
output$capacity_plot <- renderPlot({
capacityPlot()
})
output$capacity_table <- renderPlot({
reactorType()
})
output$penguin_text <- renderText({
"Woolooloo"
})
}
main()
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
tableOutput("capacity_table")
)
)
)
main()
reactor <- reactorType()
reactor
rm(capacity)
main()
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
plotOutput("capacity_table")
)
)
)
main()
server <- function(input, output){
output$capacity_plot <- renderPlot({
capacityPlot()
})
output$reactor_plot <- renderPlot({
reactorType()
})
}
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
plotOutput("reactor_plot")
)
)
)
main()
View(ui)
View(reactor)
View(main)
View(import)
View(main)
import()
capacity <- capacityPlot()
body <- dashboardBody(
fluidRow(
box(capacity, title="the capacity", width = 4)
)
)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
body <- dashboardBody(
fluidRow(
box(capacity, title="the capacity", width = 4)
)
)
View(body)
header <- dashboardHeader(title = "R Dashboard")
sideBard <- dashboardSidebar()
ui <- dashboardPage(header,sideBard,body)
maion
main()
server <- function(input, output) {
# Add server logic if needed
}
main()
shinyApp(ui, server)
body <- dashboardBody(
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 4
)
)
)
server <- function(input, output) {
output$capacityPlot <- renderPlot({
capacityPlot()
})
}
shinyApp(ui, server)
ui <- dashboardPage(header,sideBard,body)
shinyApp(ui, server)
main <- function(){
df <- import()
ui <- dashboardPage(header,sideBard,body)
shinyApp(ui, server)
}
body <- dashboardBody(
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity"
)
)
)
main()
body <- dashboardBody(
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
)
main()
body <- dashboardBody(
tabItems(
tabItem(
tabName = "tab1",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
),
tabItem(
tabName = "tab2",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
),
tabItem(
tabName = "tab3",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
),
tabItem(
tabName = "tab4",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
)
)
)
sideBard <- dashboardSidebar(
sidebarMenu(
menuItem("Tab 1", tabName = "tab1"),
menuItem("Tab 2", tabName = "tab2"),
menuItem("Tab 3", tabName = "tab3"),
menuItem("Tab 4", tabName = "tab4")
)
)
View(server)
main()
server <- function(input, output) {
output$capacityPlot <- renderPlot({
# Based on the selected tab, render different plots
selected_tab <- input$sidebarItemExpanded
# Sample code for different plots based on tabs
if (selected_tab == "tab1") {
capacityPlot()
} else if (selected_tab == "tab2") {
reactorType()
} else if (selected_tab == "tab3") {
} else if (selected_tab == "tab4") {
}
})
}
main()
main()
server <- function(input, output) {
output$capacityPlot <- renderPlot({
# Based on the selected tab, render different plots
selected_tab <- input$tabs
# Sample code for different plots based on tabs
if (selected_tab == "tab1") {
capacityPlot()
} else if (selected_tab == "tab2") {
reactorType()
} else if (selected_tab == "tab3") {
# Add logic for tab3
} else if (selected_tab == "tab4") {
# Add logic for tab4
}
})
}
main()
body <- dashboardBody(
tabItems(
tabItem(
tabName = "tab1",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "The Capacity",
width = 12
)
)
),
tabItem(
tabName = "tab2",
fluidRow(
box(
plotOutput("capacityPlot"),
title = "Reactor Type",
width = 12
)
)
),
tabItem(
tabName = "tab3",
fluidRow(
box(
# Add your content for tab3 here
width = 12
)
)
),
tabItem(
tabName = "tab4",
fluidRow(
box(
# Add your content for tab4 here
width = 12
)
)
)
)
)
main()
View(body)
main
capacityPlot
import <- function() {
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(leaflet)
library(shinydashboardy)
df <- read.csv('nuclear_power_plants.csv', sep = ';')
df$ReactorType <- as.factor(df$ReactorType)  # Convert in factor
df$Status <- as.factor(df$Status) # Convert in factor
df$isStillOperational <- ifelse(df$OperationalTo =='','OPERATING','DECOMMISSIONED')
df$OperationalFrom_Date <- as.Date(df$OperationalFrom)
df$OperationalFrom_Year <- year(df$OperationalFrom_Date)
df$OperationalTo_Date <- as.Date(df$OperationalTo)
df$OperationalTo_Year <- year(df$OperationalTo_Date)
df$OperationalLife <- df$OperationalTo_Year - df$OperationalFrom_Year
#df$DescriptionReactor <- ifelse(is.na(df$DescriptionReactor),'UNKNOWN', df$DescriptionReactor)
return(df)
}
import <- function() {
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(leaflet)
library(shinydashboard)
df <- read.csv('nuclear_power_plants.csv', sep = ';')
df$ReactorType <- as.factor(df$ReactorType)  # Convert in factor
df$Status <- as.factor(df$Status) # Convert in factor
df$isStillOperational <- ifelse(df$OperationalTo =='','OPERATING','DECOMMISSIONED')
df$OperationalFrom_Date <- as.Date(df$OperationalFrom)
df$OperationalFrom_Year <- year(df$OperationalFrom_Date)
df$OperationalTo_Date <- as.Date(df$OperationalTo)
df$OperationalTo_Year <- year(df$OperationalTo_Date)
df$OperationalLife <- df$OperationalTo_Year - df$OperationalFrom_Year
#df$DescriptionReactor <- ifelse(is.na(df$DescriptionReactor),'UNKNOWN', df$DescriptionReactor)
return(df)
}
main()
View(server)
server <- function(input, output) {
output$capacityPlot <- renderPlot({
# Based on the selected tab, render different plots
selected_tab <- input$sidebarItemExpanded
# Sample code for different plots based on tabs
if (selected_tab == "tab1") {
capacityPlot()
} else if (selected_tab == "tab2") {
reactorType()
} else if (selected_tab == "tab3") {
# Add logic for tab3
} else if (selected_tab == "tab4") {
# Add logic for tab4
}
})
}
main()
View(sideBard)
sideBard <- dashboardSidebar(
sidebarMenu(
menuItem("Tab 1", tabName = "tab1"),
menuItem("Tab 2", tabName = "tab2"),
menuItem("Tab 3", tabName = "tab3"),
menuItem("Tab 4", tabName = "tab4")
)
)
main()
View(main)
main()
View(server)
server <- function(input, output) {
output$plotCapacity <- renderPlot({
capacityPlot(df())
})
output$plotReactor <- renderPlot({
reactorType(df())
})
}
main()
body <- dashboardBody(
tabItems(
tabItem(
tabName = "tabCapacity",
fluidRow(
box(
plotOutput("plotCapacity"),
title = "Graphique de la Capacité du Réacteur",
width = 12
)
)
),
tabItem(
tabName = "tabReactor",
fluidRow(
box(
plotOutput("plotReactor"),
title = "Graphique du Type de Réacteur",
width = 12
)
)
)
)
)
main()
server <- function(input, output) {
output$plotCapacity <- renderPlot({
capacityPlot()
})
output$plotReactor <- renderPlot({
reactorType()
})
}
main()
sideBard <- dashboardSidebar(
sidebarMenu(
menuItem("Capacité du Réacteur", tabName = "tabCapacity"),
menuItem("Type de Réacteur", tabName = "tabReactor")
)
)
main()
rm(capacity)
rm (ma_carte)
main()
View(capacityPlot)
body <- dashboardBody(
theme = "teal",  # Thème principal teal
tabItems(
tabItem(
tabName = "tabCapacity",
fluidRow(
box(
plotOutput("plotCapacity"),
title = "Graphique de la Capacité du Réacteur",
width = 12
)
)
),
tabItem(
tabName = "tabReactor",
fluidRow(
box(
plotOutput("plotReactor"),
title = "Graphique du Type de Réacteur",
width = 12
)
)
)
)
)
main()
body <- dashboardBody(
tags$style(HTML("
.skin-teal .main-header .logo {
background-color: #66C5CC;
}
.skin-teal .main-header .logo:hover {
background-color: #66C5CC;
}
.skin-teal .main-header .navbar {
background-color: #66C5CC;
}
.skin-teal .main-header .navbar .nav > li > a {
color: #ffffff;
}
.skin-teal .main-header .navbar .nav > li > a:hover {
background: #66C5CC;
color: #ffffff;
}
.skin-teal .main-header .navbar .sidebar-toggle {
color: #ffffff;
}
.skin-teal .main-header .navbar .sidebar-toggle:hover {
background: #66C5CC;
color: #ffffff;
}
")),
tabItems(
tabItem(
tabName = "tabCapacity",
fluidRow(
box(
plotOutput("plotCapacity"),
title = "Graphique de la Capacité du Réacteur",
width = 12
)
)
),
tabItem(
tabName = "tabReactor",
fluidRow(
box(
plotOutput("plotReactor"),
title = "Graphique du Type de Réacteur",
width = 12
)
)
)
)
)
main()
body <- dashboardBody(
tags$link(rel = "stylesheet", type = "text/css", href = "styles.css"),
tabItems(
tabItem(
tabName = "tabCapacity",
fluidRow(
box(
plotOutput("plotCapacity"),
title = "Graphique de la Capacité du Réacteur",
width = 12
)
)
),
tabItem(
tabName = "tabReactor",
fluidRow(
box(
plotOutput("plotReactor"),
title = "Graphique du Type de Réacteur",
width = 12
)
)
)
)
)
main()
main()
main()
main()
main()
