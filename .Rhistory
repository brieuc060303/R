theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
}
function() {
df <- import()
# Exclure les lignes avec NA dans ReactorType
df <- na.omit(df)
# Define colors
bar_color <- "#66C5CC"  # rgb(102, 197, 204)
background_color <- "#FCF8F4"  # rgba(252,248,244,1.00)
Capacity <- Capacity <- ggplot(df, aes(x = Capacity)) +
geom_histogram(fill = bar_color, color = "black", binwidth = 30) +
labs(title = "Distribution of Reactor Capacity",
x = "Capacity",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"))
ReactorType <- ggplot(df, aes(x = ReactorType, fill = ReactorType)) +
geom_bar() +
labs(title = "Distribution of type of Reactors in the world",
x = "Reactor Type",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
operation <- df %>% group_by(OperationalFrom_Year, isStillOperational) %>% summarise(count=n()) %>%
+     ggplot(aes(x= OperationalFrom_Year,y=count)) + geom_histogram(aes(fill= isStillOperational), stat='identity') +
+     scale_fill_manual(name='', values=c("OPERATING"="darkgreen","DECOMMISSIONED"="darkred")) + geom_vline(xintercept=1986,color='black') + geom_vline(xintercept=2011,color='black') + labs(title='Operational Dates of nuclear power plants', subtitle='') + ggplot2::annotate("text",x=1989,y=45,label='Tchernobyl') + ggplot2::annotate("text",x=2014,y=45,label='Fukushima')
}
View(import)
import <- function() {
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(leaflet)
df <- read.csv('nuclear_power_plants.csv', sep = ';')
df$ReactorType <- as.factor(df$ReactorType)  # Convert in factor
df$Status <- as.factor(df$Status) # Convert in factor
df$isStillOperational <- ifelse(df$OperationalTo =='','OPERATING','DECOMMISSIONED')
df$OperationalFrom_Date <- as.Date(df$OperationalFrom)
df$OperationalFrom_Year <- year(df$OperationalFrom_Date)
df$OperationalTo_Date <- as.Date(df$OperationalTo)
df$OperationalTo_Year <- year(df$OperationalTo_Date)
df$OperationalLife <- df$OperationalTo_Year - df$OperationalFrom_Year
df$DescriptionReactor <- ifelse(is.na(df$DescriptionReactor),'UNKNOWN', df$DescriptionReactor)
return(df)
}
ui <- fluidPage(
titlePanel("Dashboard avec carte leaflet"),
leafletOutput("ma_carte")
)
server <- function(input, output) {
output$ma_carte <- renderLeaflet({
ma_carte <- leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2)
for (i in 1:nrow(df)) {
ma_carte <- ma_carte %>%
addMarkers(
lng = df$Longitude[i],
lat = df$Latitude[i],
popup = df$Name[i]
)
}
ma_carte
})
}
shinyApp(ui, server)
ma_carte <- leaflet(options = leafletOptions(preferCanvas = TRUE)) %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles(urlTemplate = "http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.png")
shinyApp(ui, server)
main()
View(main)
main()
library(shiny)
ui <- fluidPage(
fluidRow(p("large"), style = "background-color: red;height:250px"),
fluidRow(p("small"), style = "background-color: blue;height:100px"),
fluidRow(p("large-again"), style = "background-color: red;height:250px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
if (interactive()) {
library(shiny)
# A dashboard body with a row of infoBoxes and valueBoxes, and two rows of boxes
body <- dashboardBody(
# infoBoxes
fluidRow(
infoBox(
"Orders", uiOutput("orderNum2"), "Subtitle", icon = icon("credit-card")
),
infoBox(
"Approval Rating", "60%", icon = icon("line-chart"), color = "green",
fill = TRUE
),
infoBox(
"Progress", uiOutput("progress2"), icon = icon("users"), color = "purple"
)
),
# valueBoxes
fluidRow(
valueBox(
uiOutput("orderNum"), "New Orders", icon = icon("credit-card"),
href = "http://google.com"
),
valueBox(
tagList("60", tags$sup(style="font-size: 20px", "%")),
"Approval Rating", icon = icon("line-chart"), color = "green"
),
valueBox(
htmlOutput("progress"), "Progress", icon = icon("users"), color = "purple"
)
),
# Boxes
fluidRow(
box(status = "primary",
sliderInput("orders", "Orders", min = 1, max = 2000, value = 650),
selectInput("progress", "Progress",
choices = c("0%" = 0, "20%" = 20, "40%" = 40, "60%" = 60, "80%" = 80,
"100%" = 100)
)
),
box(title = "Histogram box title",
status = "warning", solidHeader = TRUE, collapsible = TRUE,
plotOutput("plot", height = 250)
)
),
# Boxes with solid color, using `background`
fluidRow(
# Box with textOutput
box(
title = "Status summary",
background = "green",
width = 4,
textOutput("status")
),
# Box with HTML output, when finer control over appearance is needed
box(
title = "Status summary 2",
width = 4,
background = "red",
uiOutput("status2")
),
box(
width = 4,
background = "light-blue",
p("This is content. The background color is set to light-blue")
)
)
)
server <- function(input, output) {
output$orderNum <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$orderNum2 <- renderText({
prettyNum(input$orders, big.mark=",")
})
output$progress <- renderUI({
tagList(input$progress, tags$sup(style="font-size: 20px", "%"))
})
output$progress2 <- renderUI({
paste0(input$progress, "%")
})
output$status <- renderText({
paste0("There are ", input$orders,
" orders, and so the current progress is ", input$progress, "%.")
})
output$status2 <- renderUI({
iconName <- switch(input$progress,
"100" = "ok",
"0" = "remove",
"road"
)
p("Current status is: ", icon(iconName, lib = "glyphicon"))
})
output$plot <- renderPlot({
hist(rnorm(input$orders))
})
}
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
}
df %>%
group_by(OperationalFrom_Year, isStillOperational ,region) %>%
summarise(count=n()) %>%
ggplot(aes(x= OperationalFrom_Year,y=count)) + geom_histogram(aes(fill= isStillOperational),stat='identity') +
theme_fivethirtyeight() + facet_wrap(~region, ncol=4) +
scale_fill_manual(name='', values=c("OPERATING"="darkgreen","DECOMMISSIONED"="darkred")) +
labs('Operational Dates of nuclear power plants')
main())
main()
main
View(import)
import <- function() {
df <- read.csv('nuclear_power_plants.csv', sep = ';')
df$ReactorType <- as.factor(df$ReactorType)  # Convert in factor
df$Status <- as.factor(df$Status) # Convert in factor
df$isStillOperational <- ifelse(df$OperationalTo =='','OPERATING','DECOMMISSIONED')
df$OperationalFrom_Date <- as.Date(df$OperationalFrom)
df$OperationalFrom_Year <- year(df$OperationalFrom_Date)
df$OperationalTo_Date <- as.Date(df$OperationalTo)
df$OperationalTo_Year <- year(df$OperationalTo_Date)
df$OperationalLife <- df$OperationalTo_Year - df$OperationalFrom_Year
df$DescriptionReactor <- ifelse(is.na(df$DescriptionReactor),'UNKNOWN', df$DescriptionReactor)
return(df)
}
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(leaflet)
import()
import <- function() {
library(ggplot2)
library(dplyr)
library(lubridate)
library(shiny)
library(leaflet)
df <- read.csv('nuclear_power_plants.csv', sep = ';')
df$ReactorType <- as.factor(df$ReactorType)  # Convert in factor
df$Status <- as.factor(df$Status) # Convert in factor
df$isStillOperational <- ifelse(df$OperationalTo =='','OPERATING','DECOMMISSIONED')
df$OperationalFrom_Date <- as.Date(df$OperationalFrom)
df$OperationalFrom_Year <- year(df$OperationalFrom_Date)
df$OperationalTo_Date <- as.Date(df$OperationalTo)
df$OperationalTo_Year <- year(df$OperationalTo_Date)
df$OperationalLife <- df$OperationalTo_Year - df$OperationalFrom_Year
#df$DescriptionReactor <- ifelse(is.na(df$DescriptionReactor),'UNKNOWN', df$DescriptionReactor)
return(df)
}
import()
main()
View(main)
View(server)
View(ui)
View(ui)
View(server)
ui <- fluidPage(
# Application title
titlePanel("Nuclear Power Plant"),
# Main panel
mainPanel(plotOutput(outputId = "plot"))
)
ui <- fluidPage(
# Application title
titlePanel("Nuclear Power Plant"),
# Main panel
mainPanel(plotOutput(outputId = "Capacity"))
)
main <- function() {
df <- import()
# Exclure les lignes avec NA dans ReactorType
df <- na.omit(df)
# Define colors
bar_color <- "#66C5CC"  # rgb(102, 197, 204)
background_color <- "#FCF8F4"  # rgba(252,248,244,1.00)
Capacity <- Capacity <- ggplot(df, aes(x = Capacity)) +
geom_histogram(fill = bar_color, color = "black", binwidth = 30) +
labs(title = "Distribution of Reactor Capacity",
x = "Capacity",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"))
ReactorType <- ggplot(df, aes(x = ReactorType, fill = ReactorType)) +
geom_bar() +
labs(title = "Distribution of type of Reactors in the world",
x = "Reactor Type",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
return Capacity
main <- function() {
df <- import()
# Exclure les lignes avec NA dans ReactorType
df <- na.omit(df)
# Define colors
bar_color <- "#66C5CC"  # rgb(102, 197, 204)
background_color <- "#FCF8F4"  # rgba(252,248,244,1.00)
Capacity <- Capacity <- ggplot(df, aes(x = Capacity)) +
geom_histogram(fill = bar_color, color = "black", binwidth = 30) +
labs(title = "Distribution of Reactor Capacity",
x = "Capacity",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"))
ReactorType <- ggplot(df, aes(x = ReactorType, fill = ReactorType)) +
geom_bar() +
labs(title = "Distribution of type of Reactors in the world",
x = "Reactor Type",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
return(Capacity)
}
main()
server <- function(input, output) {
output$Capacity <- Capacity
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "bill_length", label = "Select the range of bill length?", value = c(40,50), min = 32, max = 60),
navlistPanel(
"Penguins",
tabPanel(title = "Plot",
plotOutput("penguin_plot")
),
tabPanel(title = "Table",
tableOutput("penguin_table")
),
"History",
tabPanel(title = "Penguin's life",
textOutput("penguin_text")
)
)
)
server <- function(input, output){
data <- reactive({
subset(penguins, bill_length_mm > input$bill_length[1] & bill_length_mm < input$bill_length[2])
})
output$penguin_plot <- renderPlot({
plot(data()$bill_depth_mm, data()$bill_length_mm, col = data()$species)
})
output$penguin_table <- renderTable({
data()
})
output$penguin_text <- renderText({
"Let me introduce you to the life of the Palmer's Penguins"
})
}
shinyApp(ui, server)
server <- function(input, output){
output$penguin_plot <- renderPlot({
main()
})
output$penguin_table <- renderTable({
})
output$penguin_text <- renderText({
"Let me introduce you to the life of the Palmer's Penguins"
})
}
shinyApp(ui, server)
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Reactor's capacity",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
tableOutput("capacity_table")
)
)
)
server <- function(input, output){
output$capacity_plot <- renderPlot({
main()
})
output$capacity_table <- renderTable({
})
output$penguin_text <- renderText({
"Let me introduce you to the life of the Palmer's Penguins"
})
}
View(main)
capacityPlot <- function(){}
capacityPlot <- function(){
# Exclure les lignes avec NA dans ReactorType
df <- na.omit(df)
# Define colors
bar_color <- "#66C5CC"  # rgb(102, 197, 204)
background_color <- "#FCF8F4"  # rgba(252,248,244,1.00)
Capacity <- Capacity <- ggplot(df, aes(x = Capacity)) +
geom_histogram(fill = bar_color, color = "black", binwidth = 30) +
labs(title = "Distribution of Reactor Capacity",
x = "Capacity",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black"))
return(Capacity)
}
reactorType <- function(){
# Exclure les lignes avec NA dans ReactorType
df <- na.omit(df)
# Define colors
bar_color <- "#66C5CC"  # rgb(102, 197, 204)
background_color <- "#FCF8F4"  # rgba(252,248,244,1.00)
ReactorType <- ggplot(df, aes(x = ReactorType, fill = ReactorType)) +
geom_bar() +
labs(title = "Distribution of type of Reactors in the world",
x = "Reactor Type",
y = "Frequency") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
panel.background = element_rect(fill = background_color),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
axis.text = element_text(color = "black")) +
scale_fill_manual(values = rep(bar_color, length(unique(df$ReactorType))))  # Set bar color
return(ReactorType)
}
reactor = reactorType()
reactor
capacity = capacityPlot()
capacity
main - function(){}
main - function(){}
main <- function(){
df <- import()
shinyApp(ui, server)
}
server <- function(input, output){
output$capacity_plot <- renderPlot({
capacityPlot()
})
output$capacity_table <- renderPlot({
reactorType()
})
output$penguin_text <- renderText({
"Woolooloo"
})
}
main()
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
tableOutput("capacity_table")
)
)
)
main()
reactor <- reactorType()
reactor
rm(capacity)
main()
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
plotOutput("capacity_table")
)
)
)
main()
server <- function(input, output){
output$capacity_plot <- renderPlot({
capacityPlot()
})
output$reactor_plot <- renderPlot({
reactorType()
})
}
ui <- fluidPage(
tabsetPanel(
tabPanel(title = "Plot",
plotOutput("capacity_plot")
),
tabPanel(title = "Table",
plotOutput("reactor_plot")
)
)
)
main()
View(ui)
View(reactor)
View(main)
View(import)
